library(boot)
sessionInfo()
library(devtools)
install_github("lar")
install_github("lar", username = rlzijdeman)
install_github("lar", username = "rlzijdeman")
install_github("lar", username = "rlzijdeman" subdir = "pkg_unstable")
install_github("lar", username = "rlzijdeman", subdir = "pkg_unstable")
install.packages("rrdf")
install_github("rrdf", "egonw", subdir="rrdflibs")
install.packages("rJava")
library("rJava")
install.packages("devtools")
library("devtools")
install_github("rrdf", "egonw", subdir="rrdflibs")
install_github("rrdf", "egonw", subdir="rrdf")
sessionInfo()
library(rrdf)
install_github("rrdf", "egonw", subdir="rrdf")
library(SPARQL)
install.packages("SPARQL")
library(SPARQL)
library(ggmap)
prefix <- c("lop","http://semanticweb.cs.vu.nl/poseidon/ns/instances/",
"eez","http://semanticweb.cs.vu.nl/poseidon/ns/eez/")
sparql_prefix <- "PREFIX sem: <http://semanticweb.cs.vu.nl/2009/11/sem/>
PREFIX poseidon: <http://semanticweb.cs.vu.nl/poseidon/ns/instances/>
PREFIX eez: <http://semanticweb.cs.vu.nl/poseidon/ns/eez/>
PREFIX wgs84: <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
q <- paste(sparql_prefix,
"SELECT *
WHERE {
?event sem:hasPlace ?place .
?place eez:inPiracyRegion ?region .
}")
res <- SPARQL(endpoint,q,ns=prefix,extra=options)$results
res
q <- paste(sparql_prefix,
"SELECT *
WHERE {
?event sem:hasPlace ?place .
?place eez:inPiracyRegion ?region .
}")
q <- paste(sparql_prefix,
"SELECT *
WHERE {
?event sem:hasPlace ?place .
?place eez:inPiracyRegion ?region .
}")
sparql_prefix <- "PREFIX sem: <http://semanticweb.cs.vu.nl/2009/11/sem/>
PREFIX poseidon: <http://semanticweb.cs.vu.nl/poseidon/ns/instances/>
PREFIX eez: <http://semanticweb.cs.vu.nl/poseidon/ns/eez/>
PREFIX wgs84: <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
sparql_prefix <- "PREFIX sem: <http://semanticweb.cs.vu.nl/2009/11/sem/>
PREFIX poseidon: <http://semanticweb.cs.vu.nl/poseidon/ns/instances/>
PREFIX eez: <http://semanticweb.cs.vu.nl/poseidon/ns/eez/>
PREFIX wgs84: <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"
q <- paste(sparql_prefix,
"SELECT *
WHERE {
?event sem:hasPlace ?place .
?place eez:inPiracyRegion ?region .
}")
res <- SPARQL(endpoint,q,ns=prefix,extra=options)$results
res
res <- SPARQL(endpoint,q,ns=prefix,extra=options)$results
d <- SPARQL(url="http://services.data.gov.uk/reference/sparql",
query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",
ns=c('time','<http://www.w3.org/2006/time#>'))
is.data.frame(d$results)
endpoint <- "http://semanticweb.cs.vu.nl/lop/sparql/"
q <-
"SELECT *
WHERE {
?event sem:hasPlace ?place .
?place eez:inPiracyRegion ?region .
} LIMIT 20"
prefix <- c("lop","http://semanticweb.cs.vu.nl/poseidon/ns/instances/",
"eez","http://semanticweb.cs.vu.nl/poseidon/ns/eez/")
res <- SPARQL(endpoint,q,prefix)$results
pie(sort(table(res$region)),col=rainbow(12))
View(res)
table(res$region)
sort(table(res$region))
pie(sort(table(res$region)))
require(grDevices)
pie(sort(table(res$region)),col=rainbow(12))
endpoint <- "http://semanticweb.cs.vu.nl/lop/sparql/"
q <-
"SELECT *
WHERE {
?event sem:hasPlace ?place .
?place eez:inPiracyRegion ?region .
} LIMIT 20"
prefix <- c("lop","http://semanticweb.cs.vu.nl/poseidon/ns/instances/",
"eez","http://semanticweb.cs.vu.nl/poseidon/ns/eez/")
res <- SPARQL(endpoint,q,prefix)$results
pie(sort(table(res$region)),col=rainbow(12))
plot(sort(table(res$region)))
bar(sort(table(res$region)))
piechar(sort(table(res$region)))
table(res$region)
View(res)
pie(c("one", "one", "two", "one"))
pie(1,2,3,4)
pie(c(1,2,3,4))
pie(c(1,2,3,4))
pie(c(1,2,3,4), names = c("a", "b", "c", "d"))
pie(c(1,2,3,4), labels = c("a", "b", "c", "d"))
warnings()
warnings()
pie(c(1,2,3,4), labels = c("a", "b", "c", "d"))
pie(c(1,2,3,4), labels = c("a", "b", "c", "d"))
dev.off()
pie(c(1,2,3,4), labels = c("a", "b", "c", "d"))
table(c("a","b","a","c","c"))
pie(table(c("a","b","a","c","c")))
table(c(res$region))
pie(table(c(res$region)))
endpoint <- "http://semanticweb.cs.vu.nl/lop/sparql/"
q <-
"SELECT *
WHERE {
?event sem:hasPlace ?place .
?place eez:inPiracyRegion ?region .
} LIMIT 20"
prefix <- c("lop","http://semanticweb.cs.vu.nl/poseidon/ns/instances/",
"eez","http://semanticweb.cs.vu.nl/poseidon/ns/eez/")
res <- SPARQL(endpoint,q,prefix)$results
pie(table(c(res$region)))
dev.off()
pie(table(c(res$region)))
endpoint <- "http://semanticweb.cs.vu.nl/lop/sparql/"
q <-
"SELECT *
WHERE {
?event sem:hasPlace ?place .
?place eez:inPiracyRegion ?region .
} LIMIT 20"
prefix <- c("lop","http://semanticweb.cs.vu.nl/poseidon/ns/instances/",
"eez","http://semanticweb.cs.vu.nl/poseidon/ns/eez/")
res <- SPARQL(endpoint,q,prefix)$results
pie(sort(table(res$region)),col=rainbow(12))
dev.off()
endpoint <- "http://semanticweb.cs.vu.nl/lop/sparql/"
q <-
"SELECT *
WHERE {
?event sem:hasPlace ?place .
?place eez:inPiracyRegion ?region .
} LIMIT 20"
prefix <- c("lop","http://semanticweb.cs.vu.nl/poseidon/ns/instances/",
"eez","http://semanticweb.cs.vu.nl/poseidon/ns/eez/")
res <- SPARQL(endpoint,q,prefix)$results
pie(sort(table(res$region)),col=rainbow(12))
sparql_prefix <- "PREFIX sem: <http://semanticweb.cs.vu.nl/2009/11/sem/>
PREFIX poseidon: <http://semanticweb.cs.vu.nl/poseidon/ns/instances/>
PREFIX eez: <http://semanticweb.cs.vu.nl/poseidon/ns/eez/>
PREFIX wgs84: <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
"
q <- paste(sparql_prefix,
"SELECT *
WHERE {
?event sem:hasPlace ?place .
?place eez:inPiracyRegion ?region .
}")
q
res <- SPARQL(endpoint,q,ns=prefix,extra=options)$results
res <- SPARQL(endpoint,q,ns=prefix,extra=options)
install.packages(leafletR)
install.packages("leafletR")
library(leafletR)
library(rgdal)
library(rgeos)
library(sp)
install.packages("rgeos")
library(leafletR)
library(rgdal)
library(rgeos)
library(sp)
data(quakes)
quakes
q.dat <- toGeoJSON(data=quakes[1:99,], dest=tempdir(), name="quakes")
q.dat
q.style <- styleGrad(prop="mag", breaks=seq(4, 6.5, by=0.5),
style.val=rev(heat.colors(5)), leg="Richter Magnitude",
fill.alpha=0.7, rad=8)
q.map <- leaflet(data=q.dat, dest=tempdir(), title="Fiji Earthquakes",
base.map="mqsat", style=q.style, popup="mag")
url <- getURL(http://node-128.dev.socialhistoryservices.org/api/maps?year=1942)
url <- getURL("http://node-128.dev.socialhistoryservices.org/api/maps?year=1942")
library(rCurl)
library(RCurl)
url <- getURL("http://node-128.dev.socialhistoryservices.org/api/maps?year=1942")
leaflet(data = url)
dir <- "/Users/richard/Desktop/tmp/nld1942.geojson"
leaflet(data = dir)
str(url)
quakes
quakes(1:10,)
quakes[(]1:10,]
quakes[1:10,]
library(rjson)
fromJSON(readLines("http://node-128.dev.socialhistoryservices.org/api/maps?year=1942"))
json.data <- fromJSON(readLines("http://node-128.dev.socialhistoryservices.org/api/maps?year=1942"))
head(json.data)
leaflet(data = json.data)
require(devtools)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
install_github('ramnathv/rMaps')
install_github('ramnathv/rCharts@dev')
rm(list = ls())
sessionInfo()
library(leafletR)
install.packages('base64enc')
require(devtools)
require(base64enc)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
library(rMaps)
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
map <- Leaflet$new()
map$setView(c(51.505, -0.09), zoom = 13)
map$tileLayer(provider = 'Stamen.Watercolor')
map$marker(
c(51.5, -0.09),
bindPopup = 'Hi. I am a popup'
)
map
library(jsonlite)
data1 <- fromJSON("http://node-128.dev.socialhistoryservices.org/api/maps?year=1812")
str(data1)
plot(data1)
library(leafletR)
q.map <- leaflet(data=data1)
data2 <- toJSON(data1)
q.map <- leaflet(data=data2)
leaflet
leaflet2 <- function (data, dest, title, size, base.map = "osm", center,
zoom, style, popup, incl.data = FALSE, overwrite = TRUE)
{
if (missing(data))
data <- NA
if (length(data) > 1)
for (n in 1:length(data)) {
if (!is.na(data[[n]]))
#if (tolower(tail(strsplit(tail(strsplit(data[[n]],
#                                        "/")[[1]], 1), "[.]")[[1]], 1)) != "geojson")
#  stop("'data' requires GeoJSON files (file extension should be 'geojson')")
suppressWarnings(if (require(RJSONIO, quietly = TRUE))
if (!isValidJSON(data[[n]]))
stop("'data' is not a valid JSON file"))
}
else {
if (!is.na(data)) {
if (tolower(tail(strsplit(tail(strsplit(data, "/")[[1]],
1), "[.]")[[1]], 1)) != "geojson")
stop("'data' requires GeoJSON files (file extension should be 'geojson')")
suppressWarnings(if (require(RJSONIO, quietly = TRUE))
if (!isValidJSON(data))
stop("'data' is not a valid JSON file"))
}
}
if (missing(dest))
dest <- getwd()
dest <- gsub("\\\\", "/", dest)
if (missing(title)) {
if (any(is.na(data)))
title <- "map"
else {
if (length(data) == 1)
title <- gsub("_", " ", paste(head(strsplit(tail(strsplit(data,
"/")[[1]], 1), "[.]")[[1]], -1), collapse = "_"))
else title <- "map"
}
}
if (missing(size))
size <- NA
bm <- c("osm", "tls", "mqosm", "mqsat", "water", "toner")
base.map <- bm[pmatch(base.map, bm)]
if (any(is.na(base.map)))
stop("Invalid base.map")
if (missing(center))
center <- NA
if (missing(zoom))
zoom <- NA
if (missing(style))
style <- NA
if (missing(popup))
popup <- NA
if (any(!is.na(style))) {
if (class(style) == "list") {
for (i in 1:length(style)) if (class(style[[i]]) !=
"leafletr.style")
stop("At least one style object not recognized")
}
else if (class(style) != "leafletr.style")
stop("Style object not recognized")
}
if (length(data) > 1 && !is.na(style))
if (length(style) < length(data) || !is.list(style))
stop("Number of styles must correspond to number of data files")
if (file.exists(file.path(dest, gsub(" ", "_", title))) &&
!overwrite)
stop("Abort - file already exists")
if (!any(is.na(popup))) {
if (is.list(popup)) {
for (n in 1:length(popup)) if (length(popup[[n]]) ==
1)
if (popup[[n]] == "*")
popup[[n]] <- getProperties(data[[n]], FALSE)
}
else {
if (length(popup) == 1)
if (popup == "*")
popup <- getProperties(data[[1]], FALSE)
}
}
dir.create(file.path(dest, gsub(" ", "_", title)), showWarnings = FALSE)
if (any(!is.na(data)) && !incl.data) {
for (n in 1:length(data)) file.copy(data[[n]], file.path(dest,
gsub(" ", "_", title)), overwrite = overwrite)
}
if (any(is.na(data))) {
center <- c(0, 0)
zoom <- 2
}
filePath <- file.path(dest, gsub(" ", "_", title), paste0(gsub(" ",
"_", title), ".html"))
leafletInt(data, path = filePath, title, size, base.map,
center, zoom, style, popup, incl.data)
message("\nYour leaflet map has been saved under ", filePath)
invisible(filePath)
}
leaflet2(data = data1)
leaflet2(data = data2)
leaflet2 <- function (data, dest, title, size, base.map = "osm", center,
zoom, style, popup, incl.data = FALSE, overwrite = TRUE)
{
if (missing(data))
data <- NA
if (length(data) > 1)
for (n in 1:length(data)) {
if (!is.na(data[[n]]))
#if (tolower(tail(strsplit(tail(strsplit(data[[n]],
#                                        "/")[[1]], 1), "[.]")[[1]], 1)) != "geojson")
#  stop("'data' requires GeoJSON files (file extension should be 'geojson')")
suppressWarnings(if (require(RJSONIO, quietly = TRUE))
if (!isValidJSON(data[[n]]))
stop("'data' is not a valid JSON file"))
}
else {
if (!is.na(data)) {
#if (tolower(tail(strsplit(tail(strsplit(data, "/")[[1]],
#                               1), "[.]")[[1]], 1)) != "geojson")
#  stop("'data' requires GeoJSON files (file extension should be 'geojson')")
suppressWarnings(if (require(RJSONIO, quietly = TRUE))
if (!isValidJSON(data))
stop("'data' is not a valid JSON file"))
}
}
if (missing(dest))
dest <- getwd()
dest <- gsub("\\\\", "/", dest)
if (missing(title)) {
if (any(is.na(data)))
title <- "map"
else {
if (length(data) == 1)
title <- gsub("_", " ",
paste(head(strsplit(tail(strsplit(data,
"/")[[1]], 1), "[.]")[[1]], -1), collapse = "_"))
else title <- "map"
}
}
if (missing(size))
size <- NA
bm <- c("osm", "tls", "mqosm", "mqsat", "water", "toner")
base.map <- bm[pmatch(base.map, bm)]
if (any(is.na(base.map)))
stop("Invalid base.map")
if (missing(center))
center <- NA
if (missing(zoom))
zoom <- NA
if (missing(style))
style <- NA
if (missing(popup))
popup <- NA
if (any(!is.na(style))) {
if (class(style) == "list") {
for (i in 1:length(style)) if (class(style[[i]]) !=
"leafletr.style")
stop("At least one style object not recognized")
}
else if (class(style) != "leafletr.style")
stop("Style object not recognized")
}
if (length(data) > 1 && !is.na(style))
if (length(style) < length(data) || !is.list(style))
stop("Number of styles must correspond to number of data files")
if (file.exists(file.path(dest, gsub(" ", "_", title))) &&
!overwrite)
stop("Abort - file already exists")
if (!any(is.na(popup))) {
if (is.list(popup)) {
for (n in 1:length(popup)) if (length(popup[[n]]) ==
1)
if (popup[[n]] == "*")
popup[[n]] <- getProperties(data[[n]], FALSE)
}
else {
if (length(popup) == 1)
if (popup == "*")
popup <- getProperties(data[[1]], FALSE)
}
}
dir.create(file.path(dest, gsub(" ", "_", title)), showWarnings = FALSE)
if (any(!is.na(data)) && !incl.data) {
for (n in 1:length(data)) file.copy(data[[n]], file.path(dest,
gsub(" ", "_", title)), overwrite = overwrite)
}
if (any(is.na(data))) {
center <- c(0, 0)
zoom <- 2
}
filePath <- file.path(dest, gsub(" ", "_", title), paste0(gsub(" ",
"_", title), ".html"))
leafletInt(data, path = filePath, title, size, base.map,
center, zoom, style, popup, incl.data)
message("\nYour leaflet map has been saved under ", filePath)
invisible(filePath)
}
leaflet2(data = data2)
leaflet2(data = data1)
library(Rmaps)
library(rgdal)
"GeoJSON" %in% ogrDrivers()$name
"TopoJSON" %in% ogrDrivers()$name
library(sp)
library(rgdal)
setwd(tempdir())
download.file('https://raw.github.com/oscarperpinan/solar/gh-pages/data/SIAR.csv', 'siar.csv', method='wget')
library(maptools)
library(leafletR)
library(RColorBrewer)
setwd("Users/richard/Dropbox/II/projects/nlgis2/maps/")
setwd("/Users/richard/Dropbox/II/projects/nlgis2/maps/")
map <- leaflet(data="nl_1812.geojson")
map <- leaflet(data="test.geojson")
maps = Datamaps$new()
maps$set(
geographyConfig = list(
dataUrl="http://node-128.dev.socialhistoryservices.org/api/maps?year=1812"
),
scope = "id",
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.transverseMercator()
.rotate([-27,-65,0])
.scale(2000)
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#'
)
maps
maps = Datamaps$new()
maps
maps = Datamaps$new()
maps$set(
geographyConfig = list(
dataUrl="http://node-128.dev.socialhistoryservices.org/api/maps?year=1812"
),
scope = "maps?year=1812",
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.transverseMercator()
.rotate([-27,-65,0])
.scale(2000)
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#'
)
maps
maps$set(
geographyConfig = list(
dataUrl="http://node-128.dev.socialhistoryservices.org/api/maps?year=1812"
),
scope = "states",
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.transverseMercator()
.rotate([-27,-65,0])
.scale(2000)
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path().projection( projection );
return {path: path, projection: projection};
} !#'
)
maps
